% Generated by roxygen2 (4.0.2): do not edit by hand
\name{Subset}
\alias{Subset}
\alias{Subset.data.frame}
\title{Subsets a data frame and drops the unused levels.}
\usage{
Subset(x, ...)

\method{Subset}{data.frame}(x, subset, select, drop = FALSE,
  resetRownames = TRUE, ...)
}
\arguments{
\item{x}{A data frame.}

\item{subset}{A logical expression that indicates elements or rows to keep: missing values are taken as false.}

\item{select}{An expression, that indicates columns to select from a data frame.}

\item{drop}{passed on to \code{[} indexing operator.}

\item{resetRownames}{A logical that indicates if the rownames should be reset after the subsetting (\code{TRUE}; default).  Resetting rownames will simply number the rows from 1 to the number of rows in the result.}

\item{\dots}{further arguments to be passed to or from other methods.}
}
\value{
A data frame with the subsetted rows and selected variables.
}
\description{
Subsets a data frame and drops the unused levels.
}
\details{
This function is used only for data frames.  It is equivalent to the combined usage of \code{subset} and \code{drop.levels}.  Use \code{subset} for all other structures.
}
\note{
Newbie R users expect that when a factor variable is subsetted with \code{subset} that any original levels that are no longer used after the subsetting will be ignored. This, however, is not the case and often results in tables with empty cells and figures with empty bars. One remedy is to use \code{drop.levels} immediately following the \code{subset} call. Since this often becomes a repetitive sequence; thus, \code{Subset} method incorporates these two functions into one function.

There is nearly no new code here. The code is from \code{subset} with a catch for non-data.frames and a specific call to \code{drop.levels} just before the data.frame is returned. I also added an argument to allow resetting the row names.
}
\examples{
## The problem -- note use of unused level in the final table.
levels(iris$Species)
iris.set1 <- subset(iris,Species=="setosa" | Species=="versicolor")
levels(iris.set1$Species)
table(iris.set1$Species)

## A simpler fix using Subset
iris.set2 <- Subset(iris,Species=="setosa" | Species=="versicolor")
levels(iris.set2$Species)
table(iris.set2$Species)
}
\author{
Daniel Marcelino, \email{dmarcelino@live.com}
}
\seealso{
\code{subset}, \code{drop.levels} in \pkg{gdata}, and \code{dropUnusedLevels} in \pkg{Hmisc}.
}
\keyword{Misc}

